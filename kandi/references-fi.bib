@incollection{gorton_understanding_2011,
	title = {Understanding Software Architecture},
	rights = {©2011 Springer-Verlag Berlin Heidelberg},
	isbn = {978-3-642-19175-6 978-3-642-19176-3},
	pages = {1--15},
	booktitle = {Essential Software Architecture},
	publisher = {Springer Berlin Heidelberg},
	author = {Gorton, Ian},
	urldate = {2016-02-14},
	year = {2011},
	langid = {english},
	keywords = {{IT} in Business, Management of Computing and Information Systems, Software Engineering}
}

@book{Rozanski:2011:SSA:2072649,
 author = {Rozanski, Nick and Woods, Ein},
 title = {Software Systems Architecture: Working With Stakeholders Using Viewpoints and Perspectives},
 year = {2011},
 isbn = {032171833X, 9780321718334},
 pages = {31--43},
 edition = {2},
 publisher = {Addison-Wesley Professional}
} 


@inproceedings{solms_what_2012,
	location = {New York, {NY}, {USA}},
	title = {What is Software Architecture?},
	isbn = {978-1-4503-1308-7},
	doi = {10.1145/2389836.2389879},
	series = {{SAICSIT} '12},
	pages = {363--373},
	booktitle = {Proceedings of the South African Institute for Computer Scientists and Information Technologists Conference},
	publisher = {{ACM}},
	author = {Solms, Fritz},
	year = {2012},
	keywords = {reference architecture, software architecture}
}

@article{ieee_2000,
	author= {IEEE},
	title = {{IEEE} Recommended Practice for Architectural Description of Software-Intensive Systems},
	doi = {10.1109/IEEESTD.2000.91944},
	abstract = {This recommended practice addresses the activities of the creation, analysis, and sustainment of architectures of software-intensive systems, and the recording of such architectures in terms of architectural descriptions . A conceptual framework for architectural description is established. The content of an architectural description is defined. Annexes provide the rationale for key concepts and terminology, the relationships to other standards, and examples of usage.},
	pages = {i--23},
	journaltitle = {{IEEE} Std 1471-2000},
	year = {2000},
	keywords = {architectural description, architecture, software-intensive system, stakeholder con-cerns, system stakeholder, view, viewpoint},
	file = {IEEE Xplore Abstract Record:files/98/abs_all.html:text/html}
}

@inproceedings{may2005survey,
  title={A survey of software architecture viewpoint models},
  author={May, Nicholas},
  booktitle={Proceedings of the Sixth Australasian Workshop on Software and System Architectures},
  pages={13--24},
  year={2005},
  organization={Citeseer}
}

@inproceedings{Ran:1998:ASV:288408.288438,
 author = {Ran, Alexander},
 title = {Architectural Structures and Views},
 booktitle = {Proceedings of the Third International Workshop on Software Architecture},
 series = {ISAW '98},
 year = {1998},
 isbn = {1-58113-081-3},
 location = {Orlando, Florida, USA},
 pages = {117--120},
 numpages = {4},
 url = {http://doi.acm.org/10.1145/288408.288438},
 doi = {10.1145/288408.288438},
 acmid = {288438},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {architectural views, requirements, software architecture, structures of software}
} 

@INPROCEEDINGS{ARaHVeSCiSDu, 
author={A. Razavizadeh and H. Verjus and S. Cimpan and S. Ducasse}, 
booktitle={Software Architecture, 2009 European Conference on Software Architecture. WICSA/ECSA 2009. Joint Working IEEE/IFIP Conference on}, 
title={Multiple viewpoints architecture extraction}, 
year={2009}, 
pages={329-332}, 
keywords={reverse engineering;software architecture;domain knowledge;recursive framework;software system architecture;software system comprehension;viewpoints architecture extraction;Computer architecture;Computer bugs;Data mining;Europe;Information resources;Object oriented modeling;Phase measurement;Software architecture;Software systems;Time measurement}, 
doi={10.1109/WICSA.2009.5290676}, 
month={Sept}
}

@inproceedings{Brondum:2010:TAV:1833335.1833344,
 author = {Br{\o}ndum, John and Zhu, Liming},
 title = {Towards an Architectural Viewpoint for Systems of Software Intensive Systems},
 booktitle = {Proceedings of the 2010 ICSE Workshop on Sharing and Reusing Architectural Knowledge},
 series = {SHARK '10},
 year = {2010},
 isbn = {978-1-60558-967-1},
 location = {Cape Town, South Africa},
 pages = {60--63},
 numpages = {4},
 url = {http://doi.acm.org/10.1145/1833335.1833344},
 doi = {10.1145/1833335.1833344},
 acmid = {1833344},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {software architecture, systems-of-systems}
} 

@inproceedings{Galster:2011:DTC:2031759.2031761,
 author = {Galster, Matthias},
 title = {Dependencies, Traceability and Consistency in Software Architecture: Towards a View-based Perspective},
 booktitle = {Proceedings of the 5th European Conference on Software Architecture: Companion Volume},
 series = {ECSA '11},
 year = {2011},
 isbn = {978-1-4503-0618-8},
 location = {Essen, Germany},
 pages = {1:1--1:4},
 articleno = {1},
 numpages = {4},
 url = {http://doi.acm.org/10.1145/2031759.2031761},
 doi = {10.1145/2031759.2031761},
 acmid = {2031761},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {architecture viewpoints, consistency, dependencies, software architecture, traceability}
} 

@inproceedings{Garlan:2000:SAR:336512.336537,
 author = {Garlan, David},
 title = {Software Architecture: A Roadmap},
 booktitle = {Proceedings of the Conference on The Future of Software Engineering},
 series = {ICSE '00},
 year = {2000},
 isbn = {1-58113-253-0},
 location = {Limerick, Ireland},
 pages = {91--101},
 numpages = {11},
 url = {http://doi.acm.org/10.1145/336512.336537},
 doi = {10.1145/336512.336537},
 acmid = {336537},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {software architecture, software design, software engineering}
} 

% standardit

@article{ISO/IEC25010:2011,
	title={ISO/IEC 25010:2011 Systems and software engineering -- Systems and software Quality Requirements and Evaluation (SQuaRE) -- System and software quality models},
	author={ISO},
	year={2011}
}

% ylläpidettävyys

@inproceedings{bengtsson1998towards,
  title={Towards maintainability metrics on software architecture: An adaptation of object-oriented metrics},
  author={Bengtsson, PerOlof},
  booktitle={First Nordic Workshop on Software Architecture, Ronneby},
  year={1998}
}

@article{Dubey:2011:AMM:2020976.2020983,
 author = {Dubey, Sanjay Kumar and Rana, Ajay},
 title = {Assessment of Maintainability Metrics for Object-oriented Software System},
 journal = {SIGSOFT Softw. Eng. Notes},
 issue_date = {September 2011},
 volume = {36},
 number = {5},
 month = sep,
 year = {2011},
 issn = {0163-5948},
 pages = {1--7},
 numpages = {7},
 url = {http://doi.acm.org/10.1145/2020976.2020983},
 doi = {10.1145/2020976.2020983},
 acmid = {2020983},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {CK metric suite, maintainability, metrics, object-oriented system, software}
} 



% yleinen testattavuus

@INPROCEEDINGS{Jungmayr:2002, 
author={S. Jungmayr}, 
booktitle={Software Maintenance, 2002. Proceedings. International Conference on}, 
title={Identifying test-critical dependencies}, 
year={2002}, 
pages={404-413}, 
keywords={program testing;software maintenance;software metrics;regression testing;software maintenance cost reduction;software testability metrics;system structure;test-critical dependencies;Automatic testing;Controllability;Costs;Design for testability;Guidelines;Observability;Software maintenance;Software systems;Software testing;System testing}, 
doi={10.1109/ICSM.2002.1167797}, 
ISSN={1063-6773} 
}

@INPROCEEDINGS{Bruntink:2004, 
author={M. Bruntink and A. van Deursen}, 
booktitle={Source Code Analysis and Manipulation, 2004. Fourth IEEE International Workshop on}, 
title={Predicting class testability using object-oriented metrics}, 
year={2004}, 
pages={136-145}, 
keywords={Java;object-oriented methods;program testing;Java;class testability;object-oriented metrics;ISO standards;Java;Object oriented modeling;Programming;Software quality;Software systems;Software testing;Software tools;System testing;Writing}, 
doi={10.1109/SCAM.2004.16}, 
month={Sept}
}

@article{Freedman:1991:TSC:126218.126229,
 author = {Freedman, Roy S.},
 title = {Testability of Software Components},
 journal = {IEEE Trans. Softw. Eng.},
 issue_date = {June 1991},
 volume = {17},
 number = {6},
 month = jun,
 year = {1991},
 issn = {0098-5589},
 pages = {553--564},
 numpages = {12},
 url = {http://dx.doi.org/10.1109/32.87281},
 doi = {10.1109/32.87281},
 acmid = {126229},
 publisher = {IEEE Press},
 address = {Piscataway, NJ, USA},
 keywords = {controllability, domain testability, domain-testable program, domain-testable specification, formal specification, input-output inconsistencies, nondomain-testable specification, observability, program specifications, program testing, small test sets, software components, test outputs}
} 

@article{Voas:1995:STN:624607.625469,
 author = {Voas, Jeffrey M. and Miller, Keith W.},
 title = {Software Testability: The New Verification},
 journal = {IEEE Softw.},
 issue_date = {May 1995},
 volume = {12},
 number = {3},
 month = may,
 year = {1995},
 issn = {0740-7459},
 pages = {17--28},
 numpages = {12},
 url = {http://dx.doi.org/10.1109/52.382180},
 doi = {10.1109/52.382180},
 acmid = {625469},
 publisher = {IEEE Computer Society Press},
 address = {Los Alamitos, CA, USA}
} 

@inproceedings{voas_improving_1992,
	title = {Improving the software development process using testability research},
	pages = {114--121},
	booktitle = {Software Reliability Engineering, 1992. Proceedings., Third International Symposium on},
	publisher = {{IEEE}},
	author = {Voas, Jeffrey M. and Miller, Keith W.},
	urldate = {2016-03-02},
	date = {1992}
}

% design pattern testattavuus

@inproceedings{baudry_measuring_2003,
	title = {Measuring and improving design patterns testability},
	pages = {50--59},
	booktitle = {Software Metrics Symposium, 2003. Proceedings. Ninth International},
	publisher = {{IEEE}},
	author = {Baudry, Benoit and Traon, Yves Le and Sunyé, Gerson and Jézéquel, Jean-Marc},
	urldate = {2016-03-05},
	date = {2003}
}

@inproceedings{baudry_testability_2002,
	title = {Testability analysis of a {UML} class diagram},
	doi = {10.1109/METRIC.2002.1011325},
	abstract = {Design-for-testability is a very important issue in software engineering. It becomes crucial in the case of {OO} designs where control flows are generally not hierarchical, but are diffuse and distributed over the whole architecture. We concentrate on detecting, pinpointing and suppressing potential testability weaknesses of a {UML} class diagram. The attribute significant from design testability is called "class interaction": it appears when potentially concurrent client/supplier relationships between classes exist in the system. These interactions point out parts of the design that need to be improved, driving structural modifications or constraint specifications, to reduce the final testing effort.},
	eventtitle = {Eighth {IEEE} Symposium on Software Metrics, 2002. Proceedings},
	pages = {54--63},
	booktitle = {Eighth {IEEE} Symposium on Software Metrics, 2002. Proceedings},
	author = {Baudry, B. and Traon, Y. Le and Sunye, G.},
	date = {2002},
	keywords = {class interaction, Collaboration, Computer architecture, constraint specifications, control flows, Costs, design-for-testability, diagrams, formal specification, Life testing, object oriented designs, object-oriented programming, program testing, software architecture, Software design, Software Engineering, Software testing, specification languages, System testing, testability, {UML} class diagram, Unified modeling language},
	file = {IEEE Xplore Abstract Record:files/21/abs_all.html:text/html;IEEE Xplore Full Text PDF:files/20/Baudry et al. - 2002 - Testability analysis of a UML class diagram.pdf:application/pdf}
}

% arkkitehtuuriset hajut 

@INPROCEEDINGS{HotSpot, 
author={R. Mo and Y. Cai and R. Kazman and L. Xiao}, 
booktitle={Software Architecture (WICSA), 2015 12th Working IEEE/IFIP Conference on}, 
title={Hotspot Patterns: The Formal Definition and Automatic Detection of Architecture Smells}, 
year={2015}, 
pages={51-60}, 
keywords={software architecture;Baldwin design rule theory;Clark design rule theory;architecture smells;automatic detection;bug-proneness;change-prone files;error-prone files;formal definition;hotspot patterns;implicit cross-module dependency;structure-history integrated patterns;tool-supported evaluations;unstable interface;Computer architecture;Detectors;History;Maintenance engineering;Microprocessors;Observers;Software architecture;Software Architecture;Software Quality;Software maintenance}, 
doi={10.1109/WICSA.2015.12}, 
month={May}

}

% testattavuus arkkitehtuurissa

@inproceedings{Eickelmann:1996:MOS:243327.243602,
 author = {Eickelmann, Nancy S. and Richardson, Debra J.},
 title = {What Makes One Software Architecture More Testable Than Another?},
 booktitle = {Joint Proceedings of the Second International Software Architecture Workshop (ISAW-2) and International Workshop on Multiple Perspectives in Software Development (Viewpoints '96) on SIGSOFT '96 Workshops},
 series = {ISAW '96},
 year = {1996},
 isbn = {0-89791-867-3},
 location = {San Francisco, California, USA},
 pages = {65--67},
 numpages = {3},
 url = {http://doi.acm.org/10.1145/243327.243602},
 doi = {10.1145/243327.243602},
 acmid = {243602},
 publisher = {ACM},
 address = {New York, NY, USA}
} 

% Arkkitehtuuriset hajut

@inproceedings{de_andrade_architectural_2014,
	title = {Architectural bad smells in software product lines: an exploratory study},
	isbn = {978-1-4503-2523-3},
	url = {http://dl.acm.org/citation.cfm?doid=2578128.2578237},
	doi = {10.1145/2578128.2578237},
	shorttitle = {Architectural bad smells in software product lines},
	pages = {1--6},
	publisher = {{ACM} Press},
	author = {de Andrade, Hugo Sica and Almeida, Eduardo and Crnkovic, Ivica},
	urldate = {2016-03-05},
	date = {2014},
	langid = {english},
	file = {a12-de_andrade.pdf:files/17/a12-de_andrade.pdf:application/pdf}
}

@incollection{garcia_toward_2009,
	title = {Toward a catalogue of architectural bad smells},
	pages = {146--162},
	booktitle = {Architectures for adaptive software systems},
	publisher = {Springer},
	author = {Garcia, Joshua and Popescu, Daniel and Edwards, George and Medvidovic, Nenad},
	urldate = {2016-03-05},
	date = {2009}
}

@inproceedings{garcia_identifying_2009,
	title = {Identifying Architectural Bad Smells},
	doi = {10.1109/CSMR.2009.59},
	abstract = {Certain design fragments in software architectures can have a negative impact on system maintainability. In this paper, we introduce the concept of architectural "bad smells," which are frequently recurring software designs that can have non-obvious and significant detrimental effects on system lifecycle properties. We define architectural smells and differentiate them from related concepts, such as architectural antipatterns and code smells. We also describe four representative architectural smells we encountered in the context of reverse-engineering eighteen grid technologies and refactoring one large industrial system.},
	eventtitle = {13th European Conference on Software Maintenance and Reengineering, 2009. {CSMR} '09},
	pages = {255--258},
	booktitle = {13th European Conference on Software Maintenance and Reengineering, 2009. {CSMR} '09},
	author = {Garcia, J. and Popescu, D. and Edwards, G. and Medvidovic, N.},
	year = {2009},
	keywords = {Application software, architectural bad smell identification, Architectural Bad Smells, Architectural Refactoring, Computer architecture, Computer industry, Computer science, Design engineering, design fragments, grid computing, grid technologies, industrial system refactoring, reverse engineering, software architecture, software architectures, Software design, software maintenance, Software systems, system lifecycle properties, system maintainability, Technology management},
	file = {IEEE Xplore Abstract Record:files/53/abs_all.html:text/html;IEEE Xplore Full Text PDF:files/52/Garcia et al. - 2009 - Identifying Architectural Bad Smells.pdf:application/pdf}
}


@inproceedings{coelho_improving_2005,
	title = {Improving architecture testability with patterns},
	url = {http://dl.acm.org/citation.cfm?id=1094890},
	pages = {114--115},
	booktitle = {Companion to the 20th annual {ACM} {SIGPLAN} conference on Object-oriented programming, systems, languages, and applications},
	publisher = {{ACM}},
	author = {Coelho, Roberta and Kulesza, Uirá and Von Staa, Arndt},
	urldate = {2016-02-05},
	year = {2005},
	file = {p114-roberta.pdf:files/56/p114-roberta.pdf:application/pdf}
}


@inproceedings{bertran_detecting_2011,
	title = {Detecting architecturally-relevant code smells in evolving software systems},
	url = {http://dl.acm.org/citation.cfm?id=1986003},
	pages = {1090--1093},
	booktitle = {Proceedings of the 33rd International Conference on Software Engineering},
	publisher = {{ACM}},
	author = {Bertran, Isela Macia},
	urldate = {2016-03-02},
	year = {2011},
	file = {06032597.pdf:files/121/06032597.pdf:application/pdf}
}

